app:
  title: CNOE
  baseUrl: http://localhost:7007
  # https:
  #   certificate:
  #     key: -----BEGIN PRIVATE KEY-----MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgZFOxtRwPqHEBCIGGBKFxJ9uHTvR87Z12t2AF8dIoSYShRANCAASoYhajDbIx358NCgQVXXZvjS3oQrWwvO+hvEgn/a068eHiBnZ55nahuGrWo0DKJ7VgLjhxhbTwNYS2NaC3Kywr-----END PRIVATE KEY-----
  #     cert: -----BEGIN CERTIFICATE-----MIIBrjCCAVSgAwIBAgIQXgz9qlMZFBddSZAkgurSWzAKBggqhkjOPQQDAjASMRAwDgYDVQQKEwdjbm9lLmlvMB4XDTI1MDcyOTE1NDY1MloXDTI2MDcyOTIxNDY1MlowEjEQMA4GA1UEChMHY25vZS5pbzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKhiFqMNsjHfnw0KBBVddm+NLehCtbC876G8SCf9rTrx4eIGdnnmdqG4atajQMontWAuOHGFtPA1hLY1oLcrLCujgYswgYgwDgYDVR0PAQH/BAQDAgKEMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFELHmap3YJ+6igcrrUAKYWKAi3CcMDEGA1UdEQQqMCiCEWNub2UubG9jYWx0ZXN0Lm1lghMqLmNub2UubG9jYWx0ZXN0Lm1lMAoGCCqGSM49BAMCA0gAMEUCIFqC3Hp67eBISDuBR0gqrnckDlVK2j+MvV+9mlLDCrZvAiEAsq+J8gANciBg1fnMmnARj2ok/JjbKz+yI2LQCoyexZc=-----END CERTIFICATE-----

organization:
  name: CNOE

backend:
  reading:
    allow:
      - host: localhost
      - host: localhost:3000
      - host: gitea.cnoe.localtest.me
      - host: gitea.cnoe.localtest.me:8443
      - host: '*.cnoe.localtest.me'
      - host: '*.cnoe.localtest.me:8443'
      - host: https://gitea.cnoe.localtest.me

  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin:
      - http://localhost:3000
      - https://cnoe.localtest.me:8443
      - http://localhost:7007
      - http://127.0.0.1:7007
      - http://[::1]:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE, OPTIONS]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
integrations:
  gitea:
    - baseUrl: https://gitea.cnoe.localtest.me:8443
      host: gitea.cnoe.localtest.me:8443
      username: giteaAdmin
      password: ${GITEA_PASSWORD}
    - baseUrl: https://gitea.cnoe.localtest.me
      host: gitea.cnoe.localtest.me
      username: giteaAdmin
      password: ${GITEA_PASSWORD}
    - baseUrl: https://gitea.cnoe.localtest.me:8443
      host: cnoe.localtest.me:8443
      username: giteaAdmin
      password: ${GITEA_PASSWORD}

# proxy:
#   ### Example for how to add a proxy endpoint for the frontend.
#   ### A typical reason to do this is to handle HTTPS and CORS for internal services.
#   endpoints:
#     '/agent-forge':
#       target: 'http://ai-platform-engineering.ai-platform-engineering.svc.cluster.local:8000'
#       changeOrigin: true
#       secure: false  # Allow self-signed certificates
#       headers:
#         X-Custom-Source: 'backstage'
#       # Allow unauthenticated requests
#       allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
#       allowedHeaders: ['Authorization', 'Content-Type']
#       # This is important - it allows the proxy to work without backend auth
#       credentials: 'same-origin'

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development # set this to development to enable SSO
  session:
    secret: abcdfkjalskdfjkla
  providers:
    keycloak-oidc:
      development:
        metadataUrl: https://cnoe.localtest.me:8443/keycloak/realms/cnoe/.well-known/openid-configuration
        clientId: backstage
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}
        prompt: auto
      

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: backstage-scaffolder
    email: noreply
  defaultCommitMessage: "backstage scaffolder"
catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [ Component, System, API, Resource, Location, Template ]
  locations:
    - type: url
      target: https://gitea.cnoe.localtest.me:8443/giteaAdmin/idpbuilder-localdev-backstage-templates-entities/raw/branch/main/catalog-info.yaml
#    # Local example template
#    - type: file
#      target: ../../examples/template/template.yaml
#      rules:
#        - allow: [Template]
#
#    # Local example organizational data
#    - type: file
#      target: ../../examples/org.yaml
#      rules:
#        - allow: [User, Group]

    # Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: https://kubernetes.default.svc.cluster.local
          name: local
          authProvider: 'serviceAccount'
          skipTLSVerify: true  # Skip TLS verification for development
argocd:
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: in-cluster
          url: https://argocd.cnoe.localtest.me:8443
          username: admin
          # replace with your argocd password e.g. kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          password: ${ARGOCD_ADMIN_PASSWORD}
argoWorkflows:
  baseUrl: https://cnoe.localtest.me:8443/argo-workflows

agentForge:
  baseUrl: https://ai-platform-engineering.cnoe.localtest.me:8443